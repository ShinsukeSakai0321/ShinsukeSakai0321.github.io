%!PS-Adobe-2.0 EPSF-2.0
%%Title: Exponential.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Feb 25 19:15:16 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
714 4872 M
5940 0 V
1.000 UL
LTb
714 4872 M
63 0 V
stroke
630 4872 M
[ [(Helvetica) 140.0 0.0 true true 0 (99.9)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 3386 M
5940 0 V
1.000 UL
LTb
714 3386 M
63 0 V
stroke
630 3386 M
[ [(Helvetica) 140.0 0.0 true true 0 (99)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 2347 M
5940 0 V
1.000 UL
LTb
714 2347 M
63 0 V
stroke
630 2347 M
[ [(Helvetica) 140.0 0.0 true true 0 (95)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 1900 M
5940 0 V
1.000 UL
LTb
714 1900 M
63 0 V
stroke
630 1900 M
[ [(Helvetica) 140.0 0.0 true true 0 (90)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 1452 M
5940 0 V
1.000 UL
LTb
714 1452 M
63 0 V
stroke
630 1452 M
[ [(Helvetica) 140.0 0.0 true true 0 (80)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 1191 M
5940 0 V
1.000 UL
LTb
714 1191 M
63 0 V
stroke
630 1191 M
[ [(Helvetica) 140.0 0.0 true true 0 (70)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 1005 M
5940 0 V
1.000 UL
LTb
714 1005 M
63 0 V
stroke
630 1005 M
[ [(Helvetica) 140.0 0.0 true true 0 (60)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 861 M
5940 0 V
1.000 UL
LTb
714 861 M
63 0 V
stroke
630 861 M
[ [(Helvetica) 140.0 0.0 true true 0 (50)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 743 M
5940 0 V
1.000 UL
LTb
714 743 M
63 0 V
stroke
630 743 M
[ [(Helvetica) 140.0 0.0 true true 0 (40)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 644 M
5940 0 V
1.000 UL
LTb
714 644 M
63 0 V
stroke
630 644 M
[ [(Helvetica) 140.0 0.0 true true 0 (30)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 558 M
5940 0 V
1.000 UL
LTb
714 558 M
63 0 V
stroke
630 558 M
[ [(Helvetica) 140.0 0.0 true true 0 (20)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 482 M
5940 0 V
1.000 UL
LTb
714 482 M
63 0 V
stroke
630 482 M
[ [(Helvetica) 140.0 0.0 true true 0 (10)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 447 M
5940 0 V
1.000 UL
LTb
714 447 M
63 0 V
stroke
630 447 M
[ [(Helvetica) 140.0 0.0 true true 0 (5)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 420 M
5940 0 V
1.000 UL
LTb
714 420 M
63 0 V
stroke
630 420 M
[ [(Helvetica) 140.0 0.0 true true 0 (1)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
714 420 M
0 4452 V
1.000 UL
LTb
714 420 M
0 63 V
0 4389 R
0 -63 V
stroke
714 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
1308 420 M
0 4452 V
1.000 UL
LTb
1308 420 M
0 63 V
0 4389 R
0 -63 V
stroke
1308 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 5)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
1902 420 M
0 4452 V
1.000 UL
LTb
1902 420 M
0 63 V
0 4389 R
0 -63 V
stroke
1902 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 10)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
2496 420 M
0 4452 V
1.000 UL
LTb
2496 420 M
0 63 V
0 4389 R
0 -63 V
stroke
2496 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 15)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
3090 420 M
0 4452 V
1.000 UL
LTb
3090 420 M
0 63 V
0 4389 R
0 -63 V
stroke
3090 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 20)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
3684 420 M
0 4452 V
1.000 UL
LTb
3684 420 M
0 63 V
0 4389 R
0 -63 V
stroke
3684 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 25)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
4278 420 M
0 4452 V
1.000 UL
LTb
4278 420 M
0 63 V
0 4389 R
0 -63 V
stroke
4278 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 30)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
4872 420 M
0 4452 V
1.000 UL
LTb
4872 420 M
0 63 V
0 4389 R
0 -63 V
stroke
4872 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 35)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
5466 420 M
0 4452 V
1.000 UL
LTb
5466 420 M
0 63 V
0 4389 R
0 -63 V
stroke
5466 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 40)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
6060 420 M
0 4389 V
0 63 V
1.000 UL
LTb
6060 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6060 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 45)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
6654 420 M
0 4452 V
1.000 UL
LTb
6654 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6654 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 50)]
] -46.7 MCshow
1.000 UL
LTb
6654 1059 M
-63 0 V
stroke
6738 1059 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 1)]
] -46.7 MLshow
1.000 UL
LTb
6654 1704 M
-63 0 V
stroke
6738 1704 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 2)]
] -46.7 MLshow
1.000 UL
LTb
6654 2350 M
-63 0 V
stroke
6738 2350 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 3)]
] -46.7 MLshow
1.000 UL
LTb
6654 2995 M
-63 0 V
stroke
6738 2995 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 4)]
] -46.7 MLshow
1.000 UL
LTb
6654 3641 M
-63 0 V
stroke
6738 3641 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 5)]
] -46.7 MLshow
1.000 UL
LTb
6654 4286 M
-63 0 V
stroke
6738 4286 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 6)]
] -46.7 MLshow
1.000 UL
LTb
1.000 UL
LTb
714 420 M
5940 0 V
0 4452 V
-5940 0 V
714 420 L
LTb
140 2646 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (F\(x\)\(%\))]
] -46.7 MCshow
grestore
LTb
7059 2646 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (ln\(1/\(1-F\)\))]
] -46.7 MCshow
grestore
LTb
3684 70 M
[ [(Helvetica) 140.0 0.0 true true 0 (x)]
] -46.7 MCshow
1.000 UP
1.000 UP
1.000 UL
LT0
724 420 M
10 6 V
31 7 V
11 7 V
3 6 V
13 7 V
0 7 V
44 7 V
18 7 V
41 7 V
13 7 V
22 7 V
4 7 V
10 8 V
7 7 V
11 8 V
9 7 V
42 8 V
17 8 V
3 8 V
14 8 V
7 8 V
3 8 V
23 9 V
2 8 V
18 9 V
14 8 V
16 9 V
4 9 V
1 9 V
16 9 V
30 9 V
11 10 V
24 9 V
79 10 V
47 10 V
5 10 V
37 10 V
8 10 V
3 11 V
64 11 V
53 10 V
6 12 V
12 11 V
23 11 V
5 12 V
19 12 V
17 12 V
47 12 V
27 13 V
8 12 V
8 13 V
10 14 V
26 13 V
71 14 V
0 14 V
21 15 V
7 15 V
18 15 V
80 15 V
5 16 V
16 17 V
24 16 V
54 18 V
30 17 V
4 19 V
14 18 V
30 20 V
46 19 V
5 21 V
6 21 V
16 22 V
24 23 V
45 23 V
125 24 V
18 26 V
0 26 V
6 28 V
31 28 V
33 30 V
57 32 V
8 33 V
6 35 V
350 37 V
212 39 V
42 41 V
12 45 V
18 48 V
171 51 V
119 57 V
32 61 V
288 68 V
521 76 V
148 86 V
408 100 V
834 117 V
11 145 V
74 185 V
256 262 V
328 447 V
734 426 Pls
765 433 Pls
776 440 Pls
779 446 Pls
792 453 Pls
792 460 Pls
836 467 Pls
854 474 Pls
895 481 Pls
908 488 Pls
930 495 Pls
934 502 Pls
944 510 Pls
951 517 Pls
962 525 Pls
971 532 Pls
1013 540 Pls
1030 548 Pls
1033 556 Pls
1047 564 Pls
1054 572 Pls
1057 580 Pls
1080 589 Pls
1082 597 Pls
1100 606 Pls
1114 614 Pls
1130 623 Pls
1134 632 Pls
1135 641 Pls
1151 650 Pls
1181 659 Pls
1192 669 Pls
1216 678 Pls
1295 688 Pls
1342 698 Pls
1347 708 Pls
1384 718 Pls
1392 728 Pls
1395 739 Pls
1459 750 Pls
1512 760 Pls
1518 772 Pls
1530 783 Pls
1553 794 Pls
1558 806 Pls
1577 818 Pls
1594 830 Pls
1641 842 Pls
1668 855 Pls
1676 867 Pls
1684 880 Pls
1694 894 Pls
1720 907 Pls
1791 921 Pls
1791 935 Pls
1812 950 Pls
1819 965 Pls
1837 980 Pls
1917 995 Pls
1922 1011 Pls
1938 1028 Pls
1962 1044 Pls
2016 1062 Pls
2046 1079 Pls
2050 1098 Pls
2064 1116 Pls
2094 1136 Pls
2140 1155 Pls
2145 1176 Pls
2151 1197 Pls
2167 1219 Pls
2191 1242 Pls
2236 1265 Pls
2361 1289 Pls
2379 1315 Pls
2379 1341 Pls
2385 1369 Pls
2416 1397 Pls
2449 1427 Pls
2506 1459 Pls
2514 1492 Pls
2520 1527 Pls
2870 1564 Pls
3082 1603 Pls
3124 1644 Pls
3136 1689 Pls
3154 1737 Pls
3325 1788 Pls
3444 1845 Pls
3476 1906 Pls
3764 1974 Pls
4285 2050 Pls
4433 2136 Pls
4841 2236 Pls
5675 2353 Pls
5686 2498 Pls
5760 2683 Pls
6016 2945 Pls
6344 3392 Pls
1.000 UL
LTb
714 420 M
5940 0 V
0 4452 V
-5940 0 V
714 420 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
