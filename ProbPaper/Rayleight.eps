%!PS-Adobe-2.0 EPSF-2.0
%%Title: Rayleight.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Feb 26 11:48:53 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
798 4872 M
5856 0 V
1.000 UL
LTb
798 4872 M
63 0 V
stroke
714 4872 M
[ [(Helvetica) 140.0 0.0 true true 0 (99.99)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 4274 M
5856 0 V
1.000 UL
LTb
798 4274 M
63 0 V
stroke
714 4274 M
[ [(Helvetica) 140.0 0.0 true true 0 (99.9)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 3564 M
5856 0 V
1.000 UL
LTb
798 3564 M
63 0 V
stroke
714 3564 M
[ [(Helvetica) 140.0 0.0 true true 0 (99)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 2953 M
5856 0 V
1.000 UL
LTb
798 2953 M
63 0 V
stroke
714 2953 M
[ [(Helvetica) 140.0 0.0 true true 0 (95)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 2639 M
5856 0 V
1.000 UL
LTb
798 2639 M
63 0 V
stroke
714 2639 M
[ [(Helvetica) 140.0 0.0 true true 0 (90)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 2272 M
5856 0 V
1.000 UL
LTb
798 2272 M
63 0 V
stroke
714 2272 M
[ [(Helvetica) 140.0 0.0 true true 0 (80)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 2020 M
5856 0 V
1.000 UL
LTb
798 2020 M
63 0 V
stroke
714 2020 M
[ [(Helvetica) 140.0 0.0 true true 0 (70)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 1814 M
5856 0 V
1.000 UL
LTb
798 1814 M
63 0 V
stroke
714 1814 M
[ [(Helvetica) 140.0 0.0 true true 0 (60)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 1631 M
5856 0 V
1.000 UL
LTb
798 1631 M
63 0 V
stroke
714 1631 M
[ [(Helvetica) 140.0 0.0 true true 0 (50)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 1457 M
5856 0 V
1.000 UL
LTb
798 1457 M
63 0 V
stroke
714 1457 M
[ [(Helvetica) 140.0 0.0 true true 0 (40)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 1284 M
5856 0 V
1.000 UL
LTb
798 1284 M
63 0 V
stroke
714 1284 M
[ [(Helvetica) 140.0 0.0 true true 0 (30)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 1101 M
5856 0 V
1.000 UL
LTb
798 1101 M
63 0 V
stroke
714 1101 M
[ [(Helvetica) 140.0 0.0 true true 0 (20)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 883 M
5856 0 V
1.000 UL
LTb
798 883 M
63 0 V
stroke
714 883 M
[ [(Helvetica) 140.0 0.0 true true 0 (10)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 739 M
5856 0 V
1.000 UL
LTb
798 739 M
63 0 V
stroke
714 739 M
[ [(Helvetica) 140.0 0.0 true true 0 (5)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 553 M
5856 0 V
1.000 UL
LTb
798 553 M
63 0 V
stroke
714 553 M
[ [(Helvetica) 140.0 0.0 true true 0 (1)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 452 M
5856 0 V
1.000 UL
LTb
798 452 M
63 0 V
stroke
714 452 M
[ [(Helvetica) 140.0 0.0 true true 0 (0.1)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 420 M
5856 0 V
1.000 UL
LTb
798 420 M
63 0 V
stroke
714 420 M
[ [(Helvetica) 140.0 0.0 true true 0 (0.01)]
] -46.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
798 420 M
0 4452 V
1.000 UL
LTb
798 420 M
0 63 V
0 4389 R
0 -63 V
stroke
798 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
1969 420 M
0 4452 V
1.000 UL
LTb
1969 420 M
0 63 V
0 4389 R
0 -63 V
stroke
1969 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 5)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
3140 420 M
0 4452 V
1.000 UL
LTb
3140 420 M
0 63 V
0 4389 R
0 -63 V
stroke
3140 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 10)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
4312 420 M
0 4452 V
1.000 UL
LTb
4312 420 M
0 63 V
0 4389 R
0 -63 V
stroke
4312 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 15)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
5483 420 M
0 4452 V
1.000 UL
LTb
5483 420 M
0 63 V
0 4389 R
0 -63 V
stroke
5483 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 20)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
6654 420 M
0 4452 V
1.000 UL
LTb
6654 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6654 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 25)]
] -46.7 MCshow
1.000 UL
LTb
6654 420 M
-63 0 V
stroke
6738 420 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MLshow
1.000 UL
LTb
6654 1533 M
-63 0 V
stroke
6738 1533 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 1)]
] -46.7 MLshow
1.000 UL
LTb
6654 2646 M
-63 0 V
stroke
6738 2646 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 2)]
] -46.7 MLshow
1.000 UL
LTb
6654 3759 M
-63 0 V
stroke
6738 3759 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 3)]
] -46.7 MLshow
1.000 UL
LTb
6654 4872 M
-63 0 V
stroke
6738 4872 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 4)]
] -46.7 MLshow
1.000 UL
LTb
1.000 UL
LTb
798 420 M
5856 0 V
0 4452 V
-5856 0 V
798 420 L
LTb
140 2646 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (F\(x\)\(%\))]
] -46.7 MCshow
grestore
LTb
7059 2646 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (sqrt\(ln\(1/\(1-F\)\)\))]
] -46.7 MCshow
grestore
LTb
3726 70 M
[ [(Helvetica) 140.0 0.0 true true 0 (x)]
] -46.7 MCshow
1.000 UP
1.000 UP
1.000 UL
LT0
1037 552 M
106 61 V
204 48 V
57 40 V
11 36 V
58 33 V
1 30 V
172 28 V
59 27 V
124 26 V
37 24 V
60 24 V
9 23 V
26 22 V
17 21 V
28 22 V
21 20 V
97 20 V
38 20 V
6 20 V
29 19 V
14 19 V
8 18 V
46 19 V
4 18 V
36 18 V
27 18 V
31 18 V
6 18 V
3 17 V
30 17 V
52 18 V
20 17 V
42 17 V
131 17 V
73 17 V
7 17 V
56 17 V
11 17 V
5 17 V
91 17 V
75 17 V
7 17 V
16 17 V
31 18 V
7 17 V
25 17 V
22 17 V
60 17 V
33 18 V
11 17 V
9 18 V
12 18 V
33 18 V
84 18 V
0 18 V
25 18 V
7 18 V
21 19 V
90 19 V
5 19 V
18 19 V
26 19 V
58 20 V
32 20 V
3 20 V
16 21 V
30 21 V
48 21 V
5 22 V
6 22 V
16 22 V
24 23 V
45 24 V
120 24 V
17 24 V
0 26 V
6 26 V
29 26 V
30 28 V
52 28 V
8 30 V
5 30 V
302 32 V
170 33 V
34 35 V
9 36 V
14 39 V
131 40 V
88 44 V
23 46 V
205 51 V
348 55 V
93 61 V
250 68 V
475 79 V
6 93 V
40 115 V
137 155 V
170 247 V
1037 552 Pls
1143 613 Pls
1347 661 Pls
1404 701 Pls
1415 737 Pls
1473 770 Pls
1474 800 Pls
1646 828 Pls
1705 855 Pls
1829 881 Pls
1866 905 Pls
1926 929 Pls
1935 952 Pls
1961 974 Pls
1978 995 Pls
2006 1017 Pls
2027 1037 Pls
2124 1057 Pls
2162 1077 Pls
2168 1097 Pls
2197 1116 Pls
2211 1135 Pls
2219 1153 Pls
2265 1172 Pls
2269 1190 Pls
2305 1208 Pls
2332 1226 Pls
2363 1244 Pls
2369 1262 Pls
2372 1279 Pls
2402 1296 Pls
2454 1314 Pls
2474 1331 Pls
2516 1348 Pls
2647 1365 Pls
2720 1382 Pls
2727 1399 Pls
2783 1416 Pls
2794 1433 Pls
2799 1450 Pls
2890 1467 Pls
2965 1484 Pls
2972 1501 Pls
2988 1518 Pls
3019 1536 Pls
3026 1553 Pls
3051 1570 Pls
3073 1587 Pls
3133 1604 Pls
3166 1622 Pls
3177 1639 Pls
3186 1657 Pls
3198 1675 Pls
3231 1693 Pls
3315 1711 Pls
3315 1729 Pls
3340 1747 Pls
3347 1765 Pls
3368 1784 Pls
3458 1803 Pls
3463 1822 Pls
3481 1841 Pls
3507 1860 Pls
3565 1880 Pls
3597 1900 Pls
3600 1920 Pls
3616 1941 Pls
3646 1962 Pls
3694 1983 Pls
3699 2005 Pls
3705 2027 Pls
3721 2049 Pls
3745 2072 Pls
3790 2096 Pls
3910 2120 Pls
3927 2144 Pls
3927 2170 Pls
3933 2196 Pls
3962 2222 Pls
3992 2250 Pls
4044 2278 Pls
4052 2308 Pls
4057 2338 Pls
4359 2370 Pls
4529 2403 Pls
4563 2438 Pls
4572 2474 Pls
4586 2513 Pls
4717 2553 Pls
4805 2597 Pls
4828 2643 Pls
5033 2694 Pls
5381 2749 Pls
5474 2810 Pls
5724 2878 Pls
6199 2957 Pls
6205 3050 Pls
6245 3165 Pls
6382 3320 Pls
6552 3567 Pls
1.000 UL
LTb
798 420 M
5856 0 V
0 4452 V
-5856 0 V
798 420 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
